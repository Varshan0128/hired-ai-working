import { ResumeData } from '@/pages/Builder';
import { LatexTemplateMeta, buildCompactTex } from '@/lib/latex/templater';

const make = (opts: Parameters<typeof buildCompactTex>[1]) => (data: ResumeData) => buildCompactTex(data, opts);

export const LATEX_TEMPLATES: LatexTemplateMeta[] = [
  { id: 101, key: 'classic-chronological', name: 'Classic Chronological', description: 'Traditional chronological format with clean, professional layout', atsScore: 95, engine: 'pdflatex', imageSrc: '/placeholder.svg', previewSrc: '/placeholder.svg', features: ['ATS-optimized', 'Traditional', 'Professional'], makeTex: make({ geometry: 'margin=0.6in', titleRule: true, compactLists: true, fontPackage: 'lmodern' }) },
  { id: 102, key: 'modern-professional', name: 'Modern Professional', description: 'Contemporary design with clean lines and modern typography', atsScore: 96, engine: 'pdflatex', imageSrc: '/placeholder.svg', previewSrc: '/placeholder.svg', features: ['Modern', 'Clean typography', 'ATS-friendly'], makeTex: make({ geometry: 'margin=0.55in', titleRule: true, compactLists: true, fontPackage: 'lmodern' }) },
  { id: 103, key: 'elegant-minimalist', name: 'Elegant Minimalist', description: 'Refined minimalist design focusing on essential information', atsScore: 97, engine: 'pdflatex', imageSrc: '/placeholder.svg', previewSrc: '/placeholder.svg', features: ['Minimalist', 'Elegant', 'High ATS score'], makeTex: make({ geometry: 'margin=0.5in', compactLists: true, fontPackage: 'lmodern' }) },
  { id: 104, key: 'corporate-clean', name: 'Corporate Clean', description: 'Professional corporate template with structured layout', atsScore: 94, engine: 'pdflatex', imageSrc: '/placeholder.svg', previewSrc: '/placeholder.svg', features: ['Corporate', 'Structured', 'Professional'], makeTex: make({ geometry: 'margin=0.6in', titleRule: true, compactLists: true, fontPackage: 'lmodern' }) },
  { id: 105, key: 'harvard', name: 'Harvard', description: 'Academic-inspired template with traditional scholarly formatting', atsScore: 93, engine: 'pdflatex', imageSrc: '/placeholder.svg', previewSrc: '/placeholder.svg', features: ['Academic', 'Traditional', 'Scholarly'], makeTex: make({ geometry: 'margin=0.65in', titleRule: true, fontPackage: 'lmodern' }) },
  { id: 106, key: 'stanford', name: 'Stanford', description: 'Innovation-focused template with modern academic approach', atsScore: 95, engine: 'pdflatex', imageSrc: '/placeholder.svg', previewSrc: '/placeholder.svg', features: ['Innovation-focused', 'Modern academic', 'Clean'], makeTex: make({ geometry: 'margin=0.55in', compactLists: true, fontPackage: 'lmodern' }) },
  { id: 107, key: 'cambridge', name: 'Cambridge', description: 'Distinguished academic template with classical British styling', atsScore: 94, engine: 'pdflatex', imageSrc: '/placeholder.svg', previewSrc: '/placeholder.svg', features: ['Classical', 'Distinguished', 'Academic'], makeTex: make({ geometry: 'margin=0.6in', titleRule: true, compactLists: true, fontPackage: 'lmodern' }) },
  { id: 108, key: 'oxford', name: 'Oxford', description: 'Prestigious academic template with refined traditional elements', atsScore: 93, engine: 'pdflatex', imageSrc: '/placeholder.svg', previewSrc: '/placeholder.svg', features: ['Prestigious', 'Refined', 'Traditional'], makeTex: make({ geometry: 'margin=0.65in', titleRule: true, fontPackage: 'lmodern' }) },
  { id: 109, key: 'new-york', name: 'New York', description: 'Dynamic metropolitan template with bold, professional styling', atsScore: 96, engine: 'pdflatex', imageSrc: '/placeholder.svg', previewSrc: '/placeholder.svg', features: ['Metropolitan', 'Bold', 'Dynamic'], makeTex: make({ geometry: 'margin=0.5in', compactLists: true, fontPackage: 'lmodern' }) },
  { id: 110, key: 'chicago-professional', name: 'Chicago Professional', description: 'Midwest professional template with structured, no-nonsense approach', atsScore: 95, engine: 'pdflatex', imageSrc: '/placeholder.svg', previewSrc: '/placeholder.svg', features: ['Structured', 'No-nonsense', 'Professional'], makeTex: make({ geometry: 'margin=0.6in', compactLists: true, fontPackage: 'lmodern' }) },
  { id: 111, key: 'berlin-creative', name: 'Berlin Creative', description: 'Contemporary European template with creative flair and modern design', atsScore: 92, engine: 'pdflatex', imageSrc: '/placeholder.svg', previewSrc: '/placeholder.svg', features: ['Creative', 'Contemporary', 'European'], makeTex: make({ geometry: 'margin=0.55in', compactLists: true, fontPackage: 'lmodern' }) },
  { id: 112, key: 'london-corporate', name: 'London Corporate', description: 'British corporate template with refined professionalism and traditional elegance', atsScore: 94, engine: 'pdflatex', imageSrc: '/placeholder.svg', previewSrc: '/placeholder.svg', features: ['British corporate', 'Refined', 'Elegant'], makeTex: make({ geometry: 'margin=0.6in', titleRule: true, compactLists: true, fontPackage: 'lmodern' }) },
  { id: 113, key: 'paris-minimal', name: 'Paris Minimal', description: 'French-inspired minimalist template with sophisticated simplicity', atsScore: 97, engine: 'pdflatex', imageSrc: '/placeholder.svg', previewSrc: '/placeholder.svg', features: ['French-inspired', 'Minimalist', 'Sophisticated'], makeTex: make({ geometry: 'margin=0.5in', compactLists: true, fontPackage: 'lmodern' }) },
  { id: 114, key: 'toronto-clean', name: 'Toronto Clean', description: 'Canadian professional template with clean, approachable design', atsScore: 95, engine: 'pdflatex', imageSrc: '/placeholder.svg', previewSrc: '/placeholder.svg', features: ['Canadian', 'Clean', 'Approachable'], makeTex: make({ geometry: 'margin=0.6in', compactLists: true, fontPackage: 'lmodern' }) },
  { id: 115, key: 'sydney-modern', name: 'Sydney Modern', description: 'Australian contemporary template with fresh, modern approach', atsScore: 96, engine: 'pdflatex', imageSrc: '/placeholder.svg', previewSrc: '/placeholder.svg', features: ['Contemporary', 'Fresh', 'Modern'], makeTex: make({ geometry: 'margin=0.55in', compactLists: true, fontPackage: 'lmodern' }) }
];

export const getLatexTemplateById = (id: number) => LATEX_TEMPLATES.find(t => t.id === id);
