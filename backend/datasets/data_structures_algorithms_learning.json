[
    {
      "module_id": 1,
      "module_name": "Data Structures",
      "topic_title": "Arrays",
      "content_summary": "Learn how arrays work, their time complexity, and manipulation methods.",
      "code_example": "// Create array\nconst arr = [1,2,3,4];\narr.push(5);",
      "difficulty": "Beginner"
    },
    {
      "module_id": 2,
      "module_name": "Data Structures",
      "topic_title": "Linked Lists",
      "content_summary": "Understand singly and doubly linked lists and node traversal.",
      "code_example": "class Node {\n  constructor(value) {\n    this.value = value;\n    this.next = null;\n  }\n}",
      "difficulty": "Beginner"
    },
    {
      "module_id": 3,
      "module_name": "Data Structures",
      "topic_title": "Stacks and Queues",
      "content_summary": "Implement stack (LIFO) and queue (FIFO) operations.",
      "code_example": "// Stack Example\nconst stack = [];\nstack.push(10);\nstack.pop();",
      "difficulty": "Beginner"
    },
    {
      "module_id": 4,
      "module_name": "Data Structures",
      "topic_title": "Hash Tables",
      "content_summary": "Learn how hashing works, collisions, and hash functions.",
      "code_example": "const map = new Map();\nmap.set('name', 'Varshan');\nconsole.log(map.get('name'));",
      "difficulty": "Intermediate"
    },
    {
      "module_id": 5,
      "module_name": "Data Structures",
      "topic_title": "Trees",
      "content_summary": "Understand binary trees and tree traversal algorithms (DFS, BFS).",
      "code_example": "function traverse(node) {\n  if(!node) return;\n  traverse(node.left);\n  traverse(node.right);\n}",
      "difficulty": "Intermediate"
    },
    {
      "module_id": 6,
      "module_name": "Data Structures",
      "topic_title": "Graphs",
      "content_summary": "Explore graph representations and traversal algorithms.",
      "code_example": "const graph = {\n  A: ['B', 'C'],\n  B: ['A', 'D'],\n  C: ['A', 'E']\n};",
      "difficulty": "Intermediate"
    },
    {
      "module_id": 7,
      "module_name": "Algorithms",
      "topic_title": "Sorting Algorithms",
      "content_summary": "Learn Bubble Sort, Merge Sort, Quick Sort, and their complexities.",
      "code_example": "function bubbleSort(arr){\n  for(let i=0;i<arr.length;i++)\n    for(let j=0;j<arr.length-i-1;j++)\n      if(arr[j]>arr[j+1])\n        [arr[j], arr[j+1]]=[arr[j+1],arr[j]];\n}",
      "difficulty": "Intermediate"
    },
    {
      "module_id": 8,
      "module_name": "Algorithms",
      "topic_title": "Searching Algorithms",
      "content_summary": "Implement Linear Search and Binary Search.",
      "code_example": "function binarySearch(arr,target){\n  let l=0,r=arr.length-1;\n  while(l<=r){\n    let mid=Math.floor((l+r)/2);\n    if(arr[mid]===target)return mid;\n    arr[mid]<target?l=mid+1:r=mid-1;\n  }\n  return -1;\n}",
      "difficulty": "Intermediate"
    },
    {
      "module_id": 9,
      "module_name": "Algorithms",
      "topic_title": "Recursion",
      "content_summary": "Understand recursion and base cases for solving complex problems.",
      "code_example": "function factorial(n){\n  if(n===0)return 1;\n  return n*factorial(n-1);\n}",
      "difficulty": "Beginner"
    },
    {
      "module_id": 10,
      "module_name": "Algorithms",
      "topic_title": "Dynamic Programming",
      "content_summary": "Learn memoization, tabulation, and overlapping subproblems.",
      "code_example": "function fib(n,memo={}){\n  if(n in memo)return memo[n];\n  if(n<=2)return 1;\n  memo[n]=fib(n-1,memo)+fib(n-2,memo);\n  return memo[n];\n}",
      "difficulty": "Advanced"
    }
  ]
  