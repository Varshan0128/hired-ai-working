module_id,module_name,topic_title,content_summary,code_example,difficulty
1,Data Structures,Arrays,Learn how arrays work, their time complexity, and manipulation methods.,"// Create array
const arr = [1,2,3,4];
arr.push(5);",Beginner
2,Data Structures,Linked Lists,Understand singly and doubly linked lists and node traversal.,"class Node {
  constructor(value) {
    this.value = value;
    this.next = null;
  }
}",Beginner
3,Data Structures,Stacks and Queues,Implement stack (LIFO) and queue (FIFO) operations.,"// Stack Example
const stack = [];
stack.push(10);
stack.pop();",Beginner
4,Data Structures,Hash Tables,Learn how hashing works, collisions, and hash functions.,"const map = new Map();
map.set('name', 'Varshan');
console.log(map.get('name'));",Intermediate
5,Data Structures,Trees,Understand binary trees and tree traversal algorithms (DFS, BFS).,"function traverse(node) {
  if(!node) return;
  traverse(node.left);
  traverse(node.right);
}",Intermediate
6,Data Structures,Graphs,Explore graph representations and traversal algorithms.,"const graph = {
  A: ['B', 'C'],
  B: ['A', 'D'],
  C: ['A', 'E']
};",Intermediate
7,Algorithms,Sorting Algorithms,Learn Bubble Sort, Merge Sort, Quick Sort, and their complexities.,"function bubbleSort(arr){
  for(let i=0;i<arr.length;i++)
    for(let j=0;j<arr.length-i-1;j++)
      if(arr[j]>arr[j+1])
        [arr[j], arr[j+1]]=[arr[j+1],arr[j]];
}",Intermediate
8,Algorithms,Searching Algorithms,Implement Linear Search and Binary Search.,"function binarySearch(arr,target){
  let l=0,r=arr.length-1;
  while(l<=r){
    let mid=Math.floor((l+r)/2);
    if(arr[mid]===target)return mid;
    arr[mid]<target?l=mid+1:r=mid-1;
  }
  return -1;
}",Intermediate
9,Algorithms,Recursion,Understand recursion and base cases for solving complex problems.,"function factorial(n){
  if(n===0)return 1;
  return n*factorial(n-1);
}",Beginner
10,Algorithms,Dynamic Programming,Learn memoization, tabulation, and overlapping subproblems.,"function fib(n,memo={}){
  if(n in memo)return memo[n];
  if(n<=2)return 1;
  memo[n]=fib(n-1,memo)+fib(n-2,memo);
  return memo[n];
}",Advanced
11,Algorithms,Greedy Algorithms,Understand greedy strategies and how to use them efficiently.,"function coinChange(coins,amount){
  coins.sort((a,b)=>b-a);
  let count=0;
  for(let c of coins){
    count+=Math.floor(amount/c);
    amount%=c;
  }
  return count;
}",Advanced
12,Algorithms,Backtracking,Implement N-Queens and permutation generation problems.,"function permute(nums){
  const res=[];
  const backtrack=(path,opts)=>{
    if(!opts.length)return res.push(path);
    for(let i=0;i<opts.length;i++)
      backtrack([...path,opts[i]],opts.filter((_,idx)=>idx!==i));
  };
  backtrack([],nums);
  return res;
}",Advanced
13,Algorithms,Graph Algorithms,Learn Dijkstra’s, BFS, DFS, and Kruskal’s algorithms.,"function bfs(graph,start){
  const visited=new Set([start]);
  const queue=[start];
  while(queue.length){
    const node=queue.shift();
    for(const n of graph[node])
      if(!visited.has(n)){
        visited.add(n);
        queue.push(n);
      }
  }
}",Advanced
14,Algorithms,Divide and Conquer,Master techniques like Merge Sort and Quick Sort.,"function mergeSort(arr){
  if(arr.length<2)return arr;
  const mid=Math.floor(arr.length/2);
  const left=mergeSort(arr.slice(0,mid));
  const right=mergeSort(arr.slice(mid));
  return merge(left,right);
}",Intermediate
15,Problem Solving,Algorithm Optimization,Learn Big O analysis and optimization patterns.,"// Example: O(n) vs O(n^2)
for(let i=0;i<n;i++) console.log(i);",Advanced
